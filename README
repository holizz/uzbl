### THIS PROJECT IS NOT FOR:
* people want a browser that does everything
* people who want a browser with things like a built-in bookmark manager, address bar, forward/back buttons, ...
* people who expect something that works by default.  You'll need to read configs and write/edit scripts
* people who like nothing from this list: mpd, moc, wmii, dwm, awesome, mutt, pine, vim, dmenu, screen, irssi, weechat, bitlbee

### TO NEW PEOPLE:
* please read the documentation in /usr/share/uzbl/docs
* invoke uzbl --help
* to get you started: `XDG_DATA_HOME=/usr/share/uzbl/examples/data XDG_CONFIG_HOME=/usr/share/uzbl/examples/config uzbl --uri www.archlinux.org`
* try and study the sample config, read the readme to find out how it works.
* You can change the url with commands (if you have setup the appropriate keybinds) but to be most effective it's better to do url editing/changing _outside_ of uzbl.
  Eg, you can use the `load_from_*` dmenu based scripts to pick/edit a url or type a new one.
* If you have questions, you are likely to find answers in the FAQ or in the other documentation.


### INTRODUCTION
  Any program can only be really useful if it complies to the unix philosophy.
  Web browsers are frequent violators of this principle:

* They build in way too much things into the browser, dramatically decreasing the options to do things the way you want.
* They store things in way too fancy formats (xml, rdf, sqlite, ... ) which are hard to store under version control, reuse in other scripts, ...

Time to change that!

  Here are the general ideas (not all of these are implemented perfectly yet):

* each instance of uzbl renders 1 page (eg it's a small wrapper around webkit), no tabbing, tab previews, or speed dial things.
  For "multiple instances management" use your window managers, scripts or wrappers.
* very simple, plaintext , changeable at runtime configuration
* various interfaces for (programmatic) interaction with uzbl (see below)
* customizable keyboard shortcuts in vim or emacs style (whatever user wants)
* "outsource" logic that is not browsing to external scripts under the users control:
    - managing bookmarks
    - loading a url from bookmarks, history,..  Editing the curent url
    - control cookies
    - handling of downloads, history logging, etc.
    - management of cache.
    - password management
    - Leverage the power of utilities such as grep, awk, dmenu, zenity, wget, gnupg (password file) etc.
* listen to signals and do useful stuff when triggered.
* no ad blocking built in.
  Alternatives:
    - privoxy looks cool and perfectly demonstrates the unix philosphy.
    - same for http://bfilter.sourceforge.net
    - /etc/hosts (not very good cause you need root and it affects the whole system)
      uzblctrl would need to support an option to list all images on a page, so you can easily pick the links to ads to add them to your /etc/hosts.
* vimperator/konqueror-like hyperlink following.
* password management. maybe an encrypted store that unlocks with an ssh key?
* no messing in the users $HOME or in /etc: no writing of anything unless the user (or sysadmin) asks for it.
  We recommend using XDG basedir spec for separation of config, data and cache. and state should be a subdir in the config dir (not part of the spec yet) too.


### CONFIGURATION / CONTROL:
The general idea is that uzbl by default is very bare bones.  you can send it commands to update settings and perform actions, through various interfaces.
There is a limited default configuration.  Please see config.h to see what it contains.
By default, there are *no* keybinds defined at all.  (Default keybinds would work counterproductive when you try to customize)
For examples of the possibilities what you can do, please see the sample config(s), and uzbl wiki page.
There are several interfaces to interact with uzbl:

* uzbl --config <filename>: <filename> will be read line by line, and the commands in it will be executed.  useful to configure uzbl at startup.
  If you have a file in `$XDG_CONFIG_HOME/uzbl/config` (this expands to ~/.config/uzbl/config on most systems) it will be automatically recognized
* stdin: to write commands into stdin, use `--config -` (or `-c -`)
* interactive: you can enter commands (and bind them to shortcuts, even at runtime)
  By default, the behaviour is modal (vi style):
  command mode: every keystroke is interpreted to run commands
  insert mode: keystrokes are not interpreted so you can enter text into html forms
  But if you don't like modal interfaces, you can set `always_insert_mode` and configure a modkey to execute the commands. (emacs style).
  There is also support for "chained" commands (multiple characters long) (with backspace/esc shortcuts), and keyworded commands.
  Also you can have incremental matching on commands or match after pressing return.  (see sampleconfig for more info)
  Also, copy paste works when typing commands:
  * insert (paste X cliboard)
  * shift insert (paste primary selection buffer)
* FIFO & socket file: if enabled by setting their paths through one of the above means, you can have socket and fifo files available which are very useful to programatically control uzbl (from scripts etc).
  The advantage of the fifo is you can write plaintxt commands to it, but it's half duplex only (uzbl cannot send a response to you).
  The socket is full duplex but you need a socket-compatible wrapper such as netcat to work with it, or uzblctrl of course,
  an utitly we include with uzbl made especially for writing commnands to the socket (and at some point, it will be able to tell you the response
  too):  `uzblctrl -s <socketfile> -c <command>`

When uzbl forks a new instance (eg "open in new window") it will use the same commandline arguments (eg the same --config <file>), except --uri and--name.
If you made changes to the configuration at runtime, these are not pased on to the child.

### COMMAND SYNTAX
Uzbl will read commands via standard input, named fifo pipe (if `fifo_dir` is set) and IPC socket (when `socket_dir` is set).
For convenience, uzbl can also be instructed to read commands from a file on startup by using the `-c` option.  Indeed, the config file is nothing more than a list of commands.

Each command starts with the name of the command, which must be the first thing on a line; preceding whitespace is not allowed.
A command is terminated by a newline.  Empty lines and lines that start with the hash sign are ignored by the parser.  Command names are always written in lowercase.

The following commands are recognized:

* `set <key> = <value>`
   - used for changing variables on the fly
   - the changes are effective immediately; for example, setting the variable `uri` will make uzbl start loading, and changing `status_format` will make the status bar react immediately
   - if you want to unset a string, use `set` with one space after the equals sign
* `print @<key>`
   - use this to print the value of a variable.
* `bind <string> = <command>`
   - sets the character sequence `<string>` to invoke `<command>` when typed interactively in uzbl
   - there are a few tricks you can do:
       * `<string>` ends with an underscore: the command will only be invoked after pressing return/enter. If the user enters text where `<string>` has the underscore, `%s` in the `<command>` string will be replaced by this text. (optional)
       * `<string>` ends with an asterisk: similar behavior as with an underscore, but also makes the binding incremental (i.e. the command will be invoked on every keystroke).
       * `<string>` ends on a different character: you need to type the full string, which will trigger the command immediately, without pressing enter/return.
   - examples:
       * `bind o _ = uri %s`
         - uzbl will load the url when you type: 'o <url><enter>'
       * `bind /*  = search %s`
         - a search command which is called on every character typed after the slash, letting you see the search narrow down while typing.
         - Hitting return, enter or esc will terminate the search.
       * `bind ZZ  = exit`
         - When you type `ZZ` and nothing else, the exit command will be triggered immediately.

* `back`
* `forward`
* `scroll_vert <amount>`
* `scroll_horz <amount>`
   - amount is given in pixels(?) or as a percentage of the size of the view
   - set amount to 100% to scroll a whole page
* `scroll_begin`
* `scroll_end`
* `reload`
* `reload_ign_cache`
* `stop`
* `zoom_in`
* `zoom_out`
* `uri <address>`
* `js <body>`
   - execute the javascript in `<body>`
   - remember that the commands must not contain line breaks
* `script <file>`
   - execute the javascript in `<file>`
* `toggle_status`
* `spawn <executable> <additonal args>`
   - runs a command; see EXTERNAL SCRIPTS for details
   - PATH is searched so giving the full path to commands is not neccessary
   - note that the arguments as specified in "EXTERNAL SCRIPTS" are appended at the end, so the argument numbers will be higher.
* `sh <command>`
   - runs a shell command by expanding `%s` in the `shell_cmd` variable with the specified command; primarily useful as a shortcut for `spawn sh -c <body>`
   - note that the arguments as specified in "EXTERNAL SCRIPTS" are appended at the end, so the argument numbers will be higher.
* `sync_spawn <executable> <additional args>`
* `sync_sh <command>`
   - these are synchronous variants of `spawn` and `sh`, which means uzbl will wait for them to return
   - you should only need to use these manually if you want to use a chain command in a handler that wants output from the command it runs
* `talk_to_socket <socketfile> <tokens/command>`
   - lets uzbl talk to a socketfile
* `exit`
* `search <string>`
* `search_reverse <string>`
   - search with no string will search for the next/previous occurrence of the string previously searched for
* `toggle_insert_mode <optional state>`
   - if the optional state is 0, disable insert mode. If 1, enable insert mode.
* `dump_config`
   - dumps your current config (which may have been changed at runtime) to stdout, in a format you can use to pipe into uzbl again (or use as config file)
* `keycmd <string>`
* `keycmd_nl <string>`
   - keycmd sets the interactive command buffer to `<string>`.  If the given string is a valid binding, it will execute.  `Keycmd_nl` is like `keycmd`, but it also emulates a press of return, causing bindings with a parameter to execute.  For example, `keycmd_nl o google.com` would load the said url if you have a binding like `bind o _ = uri %s`.
* `keycmd_bs`
   - erase (backspace) one character from the command buffer
* `chain <command> <command> ..`
   - use for chaining multiple commands
   - remember to quote the commands; one command must come as one parameter
   - if you use `chain` with a handler script which must return some output (such as a cookie handler -- uzbl will wait for and use its output), use sync_spawn or sync_sh instead of spawn or sh in the command that should give the output
* `update_gui`
   - update the contents of the status and title bars

### VARIABLES AND CONSTANTS
Uzbl has a lot of internal variables and constants.  You can get the values (using the `print` command, see above), and for variables you can also change the value at
runtime.  Some of the values can be passed at start up through commandline arguments, others need to be set by using commands (eg in config file). 
Some of them have default values (see config.h)
Some variables have callback functions which will get called after setting the variable to perform some additional logic (see below)

Besides the builtin variables you can also define your own ones and use them in the exact same way as the buitin ones.

* Variables:
  - uri (callback: load the uri)
  - verbose: affects output on stdout
  - inject_html
  - keycmd: holds the input buffer (callback: update input buffer)
  - status_message (callback: update title)
  - show_status: show statusbar or not
  - status_top: statusbar on top?
  - status_format: marked up, to be expanded string for statusbar (callback: update statusbar)
  - status_pbar_done: character to denote done % of pageload
  - status_pbar_pending: character to denote pending % of pageload
  - status_pbar_width: width of progressbar
  - status_background: color which can be used to override Gtk theme.
  - insert_indicator: string to denote insert mode
  - command_indicator: string to denote command mode
  - title_format_long: titlebar string when no statusbar shown (will be expanded
  - title_format_short: titlebar string when statusbar shown (will be expanded)
  - icon: path to icon for Gtk
  - insert_mode: whether insert mode is active
  - always_insert_mode: set this to true if you don't like modal (vim-like) interfaces
  - reset_command_mode: automatically revert to command mode on pageload (unless always_insert_mode is set)
  - modkey: modkey which can be pressed to activate keybind from inside insert mode
  - load_finish_handler
  - load_start_handler
  - load_commit_handler
  - history_handler
  - download_handler
  - cookie_handler
  - new_window: handler to execute to invoke new uzbl window (TODO better name)
  - scheme_handler: handler to execute for each URI navigated to - the navigation request will be ignored if handler prints "USED\n"
  - fifo_dir: location to store fifo's
  - socket_dir: location to store sockets
  - http_debug: http debug mode (value 0-3)
  - shell_cmd: alias which will be expanded to use shell commands (eg sh -c)
  - proxy_url: http traffic socks proxy (eg: http://<host>:<port>)
  - max_conns
  - max_conns_host
  - useragent: to be expanded strin
  - zoom_level
  - font_size
  - monospace_size
  - minimum_font_size
  - disable_plugins (TODO rename to enable)
  - disable_scripts (TODO rename to enable)
  - autoload_images
  - autoshrink_images: shrink images to window size (default 0)
  - enable_spellcheck
  - enable_private
  - print_backgrounds: print background images? (default 0)
  - stylesheet_uri: use this to override the pagelayout with a custom stylesheet
  - resizable_text_areas
  - default_encoding: iso-8859-1 by default
  - enforce_96_dpi: 1 by default
  - caret_browsing
  - default_font_family = sans-serif
  - monospace_font_family = monospace (example "Aerial Mono" )
  - cursive_font_family = sans
  - fantasy_font_family = "Pterra"
  - serif_font_family = serif (example "DejaVu Serif")
  - sans_serif_font_family = sans (example "DejaVu Sans")


* Constants (not dumpable or writeable):
  - WEBKIT_MAJOR: set at compile time
  - WEBKIT_MINOR: set at compile time
  - WEBKIT_MICRO: set at compile time
  - ARCH_UZBL: set at compile time
  - COMMIT: set at compile time
  - LOAD_PROGRESS
  - LOAD_PROGRESSBAR
  - TITLE
  - SELECTED_URI
  - MODE
  - NAME: name of the uzbl instance (Xorg window id, unless set by cmdline arg) (TODO: can't we make this a variable?)


### VARIABLE EXPANSION AND COMMAND/JAVA SCRIPT SUBSTITUTION

Variable expansion works pretty much as known from shell interpreters (sh, bash, etc.). This means you can
construct strings with uzbl variables in them and have uzbl replace the variable name with its contents.

In order to let uzbl know what to expand you'll need to prepend @ to the variable name:

    print The variable \@show_status contains @show_status

The above example demonstrates two things:

    * '\' is treated as escape character and will use the character immediatelly following it literallily
      this means '\@show_status' will not expand to the variable content but be rather printed as
      '@show_status'

    * prepending the variable with '@' will expand to its contents

    * like in the shell you can use @{uzbl_var} to denote the beginning/end of the variable name in
      cases where it is not obvious what belongs to the name and what not.
      E.g.:  print @{show_status}foobar


Command substitution will launch any commands and substitute the call with the return value of the command.

Uzbl will substitute any commands enclosed within @(  )@:

    print Command substitution: @(uname -a)@

You can access any uzbl variable from within a command substitution:

    print @(echo -n 'Accessing the show_status var from an external script, value: @show_status')@


Java script substitution works in the exact same way as command substitution but you will need to enclose
the java script in @< >@.

    print The currently viewed document contains @<document.links.length>@ links

Variable expansion also works within a java script substitution.


When a piece of text needs to be XML escaped after it is expanded (for example,
in the status bar format), you can use @[ ]@ substitution:

    print This text is XML escaped: @[<&>]@

    # prints: This text is XML escaped: &lt;&amp;&gt;


NOTE: If you need to use literal @ or \ characters you will need to escape them:

    print At sign: \@  and backslash: \\


### TITLE AND STATUS BAR EVALUATION

The contents of the status bar can be customized by setting the status_format
variable. The contents of the window title can be customized by setting the
title_format_short variable (which is used when the status bar is displayed) and
the title_format_long variable (which is used when the status bar is not
displayed). Their values can be set using the expansion and substitution
techniques described above.

These variables are expanded in multiple stages; once when the variable is set,
and again every time that the status bar or window title are updated. Expansions
that should be evaluated on every update need to be escaped:

    set title_format_short = @(date)@
    # this expansion will be evaluated when the variable is set.
    # the title will stay constant with the date that the variable was set.

    set title_format_short = \@(date)\@
    # this expansion will be evaluated when the window title is updated.
    # the date in the title will change when you change pages, for example.

    set title_format_short = \\\@(date)\\\@
    # the title will stay constant as a literal "@(date)@"

The status_format variable can contain Pango markup (see
<http://library.gnome.org/devel/pango/stable/PangoMarkupFormat.html>). In the
status_format, variables that might contain characters like '<', '&' and '>',
should be wrapped in a @[]@ substitution so that they don't interfere with the
status bar's markup; see the example config for examples.


### EXTERNAL SCRIPTS
You can use external scripts with uzbl the following ways:

* let uzbl call them. these scripts are called handlers in the uzbl config. used for handling logging history, handling a new download,..
* call them yourself from inside uzbl.  you can bind keys for this. examples: add new bookmark, load new url,..
* You could also use xbindkeys or your WM config to trigger scripts if uzbl does not have focus

Have a look at the sample configs and scripts!

Handler scripts that are called by uzbl are passed the following arguments:

    $1 uzbl-config-file
    $2 uzbl-pid
    $3 uzbl-x-window-id
    $4 uzbl_fifo-filename
    $5 uzbl_socket-filename
    $6 current page url
    $7 current page title
    .. [ script specific ] (optional)

The script specific arguments are this:

* history:

    $8 date of visit (Y-m-d H:i:s localtime)

* add bookmark:

    none

* download:

    $8 url of item to download
    $9 url of http proxy (optional)

* cookie handler

    $8 GET/PUT
    $9 request address scheme (e.g. http or https)
    $10 request address host (if current page url is www.foo.com/somepage, this could be something else than foo, eg advertising from another host)
    $11 request address path
    $12 cookie (only with PUT requests)

* scheme handler:

    $8 URI of the page to be navigated to


Custom, userdefined scripts (`spawn foo bar`) get first the arguments as specified in the config and then the above 7 are added at the end.

### JAVASCRIPT HELPER OBJECT

Javascript code run from uzbl is given a special object in the global namespace which gives special privileges to these scripts. This object is called `Uzbl`, and it is added and removed before and after the script execution so that it is hidden to web javascripts (There is no race condition, since all the javascript code runs in a single thread)

Currently, the `Uzbl` object provides only one function:

* `Uzbl.run( <command> )`
   - command is any uzbl command as defined above
   - return value: a string, either empty or containing the output of the command. Very few commands return their output currently, including js, script, and print.
   - Examples:
       * `Uzbl.run("spawn insert_bookmark.sh")`
       * `uri = Uzbl.run("print @uri")` (see variable expansion below)

### JAVASCRIPT SECURITY

Since defined variables and functions are set in the global namespace (`window` object) as default, it is recommended to wrap your scripts like this:

    (function(Uzbl) {
        ...
    })(Uzbl);

This way, everything is kept private. It also turns Uzbl into a local variable, which can be accessed from callback functions defined inside. However for some situations, isolating everything isn't an option, for example, with binds. You can define them directly in the script body, and use `var Uzbl = window.Uzbl;` to make the Uzbl variable local, as in the following example:

    function f() {
        var Uzbl = window.Uzbl;
        Uzbl.run(...);
        setTimeout(function() {
            Uzbl.run(...);
        }, 500);
    }

Copying the Uzbl object and creating public functions should be taken with care to avoid creating security holes. Keep in mind that the "f" function above would be defined in the `window` object, and as such any javascript in the current page can call it.

### COMMAND LINE ARGUMENTS
    uzbl [ uri ]
    -u, --uri=URI            Uri to load at startup (equivalent to 'uzbl <uri>' or 'set uri = URI' after uzbl has launched)
    -v, --verbose            Whether to print all messages or just errors.
    -n, --name=NAME          Name of the current instance (defaults to Xorg window id)
    -c, --config=FILE        Path to config file or '-' for stdin
    -s, --socket=SOCKET      Socket ID
    -g, --geometry=GEOMETRY  Set window geometry (format: WIDTHxHEIGHT+-X+-Y)
    -V, --version            Print the version and exit
    --display=DISPLAY        X display to use
    --help                   Help




### BUGS
Please report new issues @ uzbl.org/bugs
